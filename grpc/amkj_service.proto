syntax = "proto3";

package amkj;

option go_package = "./;grpc_amkj";

import "google/protobuf/timestamp.proto";

service AmkjService {
    rpc GetServerStatus(GetServerStatusRequest) returns (GetServerStatusResponse) {}

    rpc StartMaintenance(StartMaintenanceRequest) returns (StartMaintenanceResponse) {}
    rpc EndMaintenance(EndMaintenanceRequest) returns (EndMaintenanceResponse) {}

    rpc ToggleWhitelist(ToggleWhitelistRequest) returns (ToggleWhitelistResponse) {}
    rpc GetWhitelist(GetWhitelistRequest) returns (GetWhitelistResponse) {}
    rpc AddWhitelistUser(AddWhitelistUserRequest) returns (AddWhitelistUserResponse) {}
    rpc DelWhitelistUser(DelWhitelistUserRequest) returns (DelWhitelistUserResponse) {}

    rpc GetAllUsers(GetAllUsersRequest) returns (GetAllUsersResponse) {}
    rpc KickUser(KickUserRequest) returns (KickUserResponse) {}
    rpc KickAllUsers(KickAllUsersRequest) returns (KickAllUsersResponse) {}

    rpc GetAllGatherings(GetAllGatheringsRequest) returns (GetAllGatheringsResponse) {}
    rpc GetAllTournaments(GetAllTournamentsRequest) returns (GetAllTournamentsResponse) {}
}

// ========================================================

message GetServerStatusRequest {}
message GetServerStatusResponse {
    bool is_online = 1;
    bool is_maintenance = 2;
    bool is_whitelist = 3;
    int32 num_clients = 4;
    google.protobuf.Timestamp start_maintenance_time = 5;
    google.protobuf.Timestamp end_maintenance_time = 6;
}

// ========================================================

message StartMaintenanceRequest {
    google.protobuf.Timestamp projected_utc_end_maintenance_time = 1;
}
message StartMaintenanceResponse {}

// ========================================================

message EndMaintenanceRequest {}
message EndMaintenanceResponse {}

// ========================================================

message ToggleWhitelistRequest {}
message ToggleWhitelistResponse {
    bool is_whitelist = 1;
}

// ========================================================

message GetWhitelistRequest {}
message GetWhitelistResponse {
    repeated uint32 pids = 1;
}

// ========================================================

message AddWhitelistUserRequest {
    uint32 pid = 1;
}
message AddWhitelistUserResponse {}

// ========================================================

message DelWhitelistUserRequest {
    uint32 pid = 1;
}
message DelWhitelistUserResponse {}

// ========================================================

message GetAllUsersRequest {}
message GetAllUsersResponse {
    repeated uint32 pids = 1;
}

// ========================================================

message KickUserRequest {
    uint32 pid = 1;
}
message KickUserResponse {
    bool was_connected = 1;
}

// ========================================================

message KickAllUsersRequest {}
message KickAllUsersResponse {
    int32 num_kicked = 1;
}

// ========================================================

message Gathering {
    uint32 gid = 1;
    uint32 host = 2;
    uint32 owner = 3;
    repeated uint32 attributes = 4;
    uint32 game_mode = 5;
    bytes app_data = 6;
    repeated int64 players = 7;
    uint32 min_participants = 8;
    uint32 max_participants = 9;
}

message GetAllGatheringsRequest {
    uint32 offset = 1;
    int32 limit = 2;
}

message GetAllGatheringsResponse {
    repeated Gathering gatherings = 1;
}

// ========================================================

message Tournament {
    uint32 id = 1;
    uint32 owner = 2;
    repeated uint32 attributes = 3;
    bytes app_data = 4;
    int64 total_participants = 5;
    int64 season_id = 6;
    string name = 7;
    string description = 8;
    string red_team = 9;
    string blue_team = 10;
    uint32 repeat_type = 11;
    uint32 gameset_num = 12;
    uint32 icon_type = 13;
    uint32 battle_time = 14;
    uint32 update_date = 15;
}

message GetAllTournamentsRequest {
    uint32 offset = 1;
    int32 limit = 2;
}
message GetAllTournamentsResponse {
    repeated Tournament tournaments = 1;
}
